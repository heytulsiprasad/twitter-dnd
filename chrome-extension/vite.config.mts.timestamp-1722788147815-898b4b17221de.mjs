// vite.config.mts
import { defineConfig } from "file:///Users/heytulsiprasad/Desktop/projects/twitter-dnd/node_modules/.pnpm/vite@5.3.3_@types+node@20.14.10_sass@1.77.8_terser@5.31.1/node_modules/vite/dist/node/index.js";
import { resolve as resolve2 } from "path";
import libAssetsPlugin from "file:///Users/heytulsiprasad/Desktop/projects/twitter-dnd/node_modules/.pnpm/@laynezh+vite-plugin-lib-assets@0.5.23_vite@5.3.3_@types+node@20.14.10_sass@1.77.8_terser@5.31.1_/node_modules/@laynezh/vite-plugin-lib-assets/dist/index.js";

// utils/plugins/make-manifest-plugin.ts
import * as fs from "fs";
import * as path from "path";
import { ManifestParser, colorLog } from "file:///Users/heytulsiprasad/Desktop/projects/twitter-dnd/packages/dev-utils/dist/index.js";
import { pathToFileURL } from "url";
import * as process from "process";
var __vite_injected_original_dirname = "/Users/heytulsiprasad/Desktop/projects/twitter-dnd/chrome-extension/utils/plugins";
var { resolve } = path;
var rootDir = resolve(__vite_injected_original_dirname, "..", "..");
var manifestFile = resolve(rootDir, "manifest.js");
var getManifestWithCacheBurst = () => {
  const withCacheBurst = (path2) => `${path2}?${Date.now().toString()}`;
  if (process.platform === "win32") {
    return import(withCacheBurst(pathToFileURL(manifestFile).href));
  }
  return import(withCacheBurst(manifestFile));
};
function makeManifestPlugin(config) {
  function makeManifest(manifest, to) {
    if (!fs.existsSync(to)) {
      fs.mkdirSync(to);
    }
    const manifestPath = resolve(to, "manifest.json");
    const isFirefox = process.env.__FIREFOX__;
    fs.writeFileSync(manifestPath, ManifestParser.convertManifestToString(manifest, isFirefox ? "firefox" : "chrome"));
    colorLog(`Manifest file copy complete: ${manifestPath}`, "success");
  }
  return {
    name: "make-manifest",
    buildStart() {
      this.addWatchFile(manifestFile);
    },
    async writeBundle() {
      const outDir2 = config.outDir;
      const manifest = await getManifestWithCacheBurst();
      makeManifest(manifest.default, outDir2);
    }
  };
}

// vite.config.mts
import { watchPublicPlugin, watchRebuildPlugin } from "file:///Users/heytulsiprasad/Desktop/projects/twitter-dnd/packages/hmr/dist/index.js";
import { isDev, isProduction, watchOption } from "file:///Users/heytulsiprasad/Desktop/projects/twitter-dnd/packages/vite-config/index.mjs";
var __vite_injected_original_dirname2 = "/Users/heytulsiprasad/Desktop/projects/twitter-dnd/chrome-extension";
var rootDir2 = resolve2(__vite_injected_original_dirname2);
var libDir = resolve2(rootDir2, "lib");
var outDir = resolve2(rootDir2, "..", "dist");
var vite_config_default = defineConfig({
  resolve: {
    alias: {
      "@root": rootDir2,
      "@lib": libDir,
      "@assets": resolve2(libDir, "assets")
    }
  },
  plugins: [
    libAssetsPlugin({
      outputPath: outDir
    }),
    watchPublicPlugin(),
    makeManifestPlugin({ outDir }),
    isDev && watchRebuildPlugin({ reload: true })
  ],
  publicDir: resolve2(rootDir2, "public"),
  build: {
    lib: {
      formats: ["iife"],
      entry: resolve2(__vite_injected_original_dirname2, "lib/background/index.ts"),
      name: "BackgroundScript",
      fileName: "background"
    },
    outDir,
    emptyOutDir: false,
    sourcemap: isDev,
    minify: isProduction,
    reportCompressedSize: isProduction,
    watch: watchOption,
    rollupOptions: {
      external: ["chrome"]
    }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcubXRzIiwgInV0aWxzL3BsdWdpbnMvbWFrZS1tYW5pZmVzdC1wbHVnaW4udHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCIvVXNlcnMvaGV5dHVsc2lwcmFzYWQvRGVza3RvcC9wcm9qZWN0cy90d2l0dGVyLWRuZC9jaHJvbWUtZXh0ZW5zaW9uXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvVXNlcnMvaGV5dHVsc2lwcmFzYWQvRGVza3RvcC9wcm9qZWN0cy90d2l0dGVyLWRuZC9jaHJvbWUtZXh0ZW5zaW9uL3ZpdGUuY29uZmlnLm10c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vVXNlcnMvaGV5dHVsc2lwcmFzYWQvRGVza3RvcC9wcm9qZWN0cy90d2l0dGVyLWRuZC9jaHJvbWUtZXh0ZW5zaW9uL3ZpdGUuY29uZmlnLm10c1wiO2ltcG9ydCB7IGRlZmluZUNvbmZpZyB9IGZyb20gJ3ZpdGUnO1xuaW1wb3J0IHsgcmVzb2x2ZSB9IGZyb20gJ3BhdGgnO1xuaW1wb3J0IGxpYkFzc2V0c1BsdWdpbiBmcm9tICdAbGF5bmV6aC92aXRlLXBsdWdpbi1saWItYXNzZXRzJztcbmltcG9ydCBtYWtlTWFuaWZlc3RQbHVnaW4gZnJvbSAnLi91dGlscy9wbHVnaW5zL21ha2UtbWFuaWZlc3QtcGx1Z2luJztcbmltcG9ydCB7IHdhdGNoUHVibGljUGx1Z2luLCB3YXRjaFJlYnVpbGRQbHVnaW4gfSBmcm9tICdAZXh0ZW5zaW9uL2htcic7XG5pbXBvcnQgeyBpc0RldiwgaXNQcm9kdWN0aW9uLCB3YXRjaE9wdGlvbiB9IGZyb20gJ0BleHRlbnNpb24vdml0ZS1jb25maWcnO1xuXG5jb25zdCByb290RGlyID0gcmVzb2x2ZShfX2Rpcm5hbWUpO1xuY29uc3QgbGliRGlyID0gcmVzb2x2ZShyb290RGlyLCAnbGliJyk7XG5cbmNvbnN0IG91dERpciA9IHJlc29sdmUocm9vdERpciwgJy4uJywgJ2Rpc3QnKTtcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyh7XG4gIHJlc29sdmU6IHtcbiAgICBhbGlhczoge1xuICAgICAgJ0Byb290Jzogcm9vdERpcixcbiAgICAgICdAbGliJzogbGliRGlyLFxuICAgICAgJ0Bhc3NldHMnOiByZXNvbHZlKGxpYkRpciwgJ2Fzc2V0cycpLFxuICAgIH0sXG4gIH0sXG4gIHBsdWdpbnM6IFtcbiAgICBsaWJBc3NldHNQbHVnaW4oe1xuICAgICAgb3V0cHV0UGF0aDogb3V0RGlyLFxuICAgIH0pLFxuICAgIHdhdGNoUHVibGljUGx1Z2luKCksXG4gICAgbWFrZU1hbmlmZXN0UGx1Z2luKHsgb3V0RGlyIH0pLFxuICAgIGlzRGV2ICYmIHdhdGNoUmVidWlsZFBsdWdpbih7IHJlbG9hZDogdHJ1ZSB9KSxcbiAgXSxcbiAgcHVibGljRGlyOiByZXNvbHZlKHJvb3REaXIsICdwdWJsaWMnKSxcbiAgYnVpbGQ6IHtcbiAgICBsaWI6IHtcbiAgICAgIGZvcm1hdHM6IFsnaWlmZSddLFxuICAgICAgZW50cnk6IHJlc29sdmUoX19kaXJuYW1lLCAnbGliL2JhY2tncm91bmQvaW5kZXgudHMnKSxcbiAgICAgIG5hbWU6ICdCYWNrZ3JvdW5kU2NyaXB0JyxcbiAgICAgIGZpbGVOYW1lOiAnYmFja2dyb3VuZCcsXG4gICAgfSxcbiAgICBvdXREaXIsXG4gICAgZW1wdHlPdXREaXI6IGZhbHNlLFxuICAgIHNvdXJjZW1hcDogaXNEZXYsXG4gICAgbWluaWZ5OiBpc1Byb2R1Y3Rpb24sXG4gICAgcmVwb3J0Q29tcHJlc3NlZFNpemU6IGlzUHJvZHVjdGlvbixcbiAgICB3YXRjaDogd2F0Y2hPcHRpb24sXG4gICAgcm9sbHVwT3B0aW9uczoge1xuICAgICAgZXh0ZXJuYWw6IFsnY2hyb21lJ10sXG4gICAgfSxcbiAgfSxcbn0pO1xuIiwgImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCIvVXNlcnMvaGV5dHVsc2lwcmFzYWQvRGVza3RvcC9wcm9qZWN0cy90d2l0dGVyLWRuZC9jaHJvbWUtZXh0ZW5zaW9uL3V0aWxzL3BsdWdpbnNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIi9Vc2Vycy9oZXl0dWxzaXByYXNhZC9EZXNrdG9wL3Byb2plY3RzL3R3aXR0ZXItZG5kL2Nocm9tZS1leHRlbnNpb24vdXRpbHMvcGx1Z2lucy9tYWtlLW1hbmlmZXN0LXBsdWdpbi50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vVXNlcnMvaGV5dHVsc2lwcmFzYWQvRGVza3RvcC9wcm9qZWN0cy90d2l0dGVyLWRuZC9jaHJvbWUtZXh0ZW5zaW9uL3V0aWxzL3BsdWdpbnMvbWFrZS1tYW5pZmVzdC1wbHVnaW4udHNcIjtpbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgTWFuaWZlc3RQYXJzZXIsIGNvbG9yTG9nIH0gZnJvbSAnQGV4dGVuc2lvbi9kZXYtdXRpbHMnO1xuaW1wb3J0IHR5cGUgeyBQbHVnaW5PcHRpb24gfSBmcm9tICd2aXRlJztcbmltcG9ydCB7IHBhdGhUb0ZpbGVVUkwgfSBmcm9tICd1cmwnO1xuaW1wb3J0ICogYXMgcHJvY2VzcyBmcm9tICdwcm9jZXNzJztcblxuY29uc3QgeyByZXNvbHZlIH0gPSBwYXRoO1xuXG5jb25zdCByb290RGlyID0gcmVzb2x2ZShfX2Rpcm5hbWUsICcuLicsICcuLicpO1xuY29uc3QgbWFuaWZlc3RGaWxlID0gcmVzb2x2ZShyb290RGlyLCAnbWFuaWZlc3QuanMnKTtcblxuY29uc3QgZ2V0TWFuaWZlc3RXaXRoQ2FjaGVCdXJzdCA9ICgpOiBQcm9taXNlPHsgZGVmYXVsdDogY2hyb21lLnJ1bnRpbWUuTWFuaWZlc3RWMyB9PiA9PiB7XG4gIGNvbnN0IHdpdGhDYWNoZUJ1cnN0ID0gKHBhdGg6IHN0cmluZykgPT4gYCR7cGF0aH0/JHtEYXRlLm5vdygpLnRvU3RyaW5nKCl9YDtcbiAgLyoqXG4gICAqIEluIFdpbmRvd3MsIGltcG9ydCgpIGRvZXNuJ3Qgd29yayB3aXRob3V0IGZpbGU6Ly8gcHJvdG9jb2wuXG4gICAqIFNvLCB3ZSBuZWVkIHRvIGNvbnZlcnQgcGF0aCB0byBmaWxlOi8vIHByb3RvY29sLiAodXJsLnBhdGhUb0ZpbGVVUkwpXG4gICAqL1xuICBpZiAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJykge1xuICAgIHJldHVybiBpbXBvcnQod2l0aENhY2hlQnVyc3QocGF0aFRvRmlsZVVSTChtYW5pZmVzdEZpbGUpLmhyZWYpKTtcbiAgfVxuICByZXR1cm4gaW1wb3J0KHdpdGhDYWNoZUJ1cnN0KG1hbmlmZXN0RmlsZSkpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWFrZU1hbmlmZXN0UGx1Z2luKGNvbmZpZzogeyBvdXREaXI6IHN0cmluZyB9KTogUGx1Z2luT3B0aW9uIHtcbiAgZnVuY3Rpb24gbWFrZU1hbmlmZXN0KG1hbmlmZXN0OiBjaHJvbWUucnVudGltZS5NYW5pZmVzdFYzLCB0bzogc3RyaW5nKSB7XG4gICAgaWYgKCFmcy5leGlzdHNTeW5jKHRvKSkge1xuICAgICAgZnMubWtkaXJTeW5jKHRvKTtcbiAgICB9XG4gICAgY29uc3QgbWFuaWZlc3RQYXRoID0gcmVzb2x2ZSh0bywgJ21hbmlmZXN0Lmpzb24nKTtcblxuICAgIGNvbnN0IGlzRmlyZWZveCA9IHByb2Nlc3MuZW52Ll9fRklSRUZPWF9fO1xuICAgIGZzLndyaXRlRmlsZVN5bmMobWFuaWZlc3RQYXRoLCBNYW5pZmVzdFBhcnNlci5jb252ZXJ0TWFuaWZlc3RUb1N0cmluZyhtYW5pZmVzdCwgaXNGaXJlZm94ID8gJ2ZpcmVmb3gnIDogJ2Nocm9tZScpKTtcblxuICAgIGNvbG9yTG9nKGBNYW5pZmVzdCBmaWxlIGNvcHkgY29tcGxldGU6ICR7bWFuaWZlc3RQYXRofWAsICdzdWNjZXNzJyk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG5hbWU6ICdtYWtlLW1hbmlmZXN0JyxcbiAgICBidWlsZFN0YXJ0KCkge1xuICAgICAgdGhpcy5hZGRXYXRjaEZpbGUobWFuaWZlc3RGaWxlKTtcbiAgICB9LFxuICAgIGFzeW5jIHdyaXRlQnVuZGxlKCkge1xuICAgICAgY29uc3Qgb3V0RGlyID0gY29uZmlnLm91dERpcjtcbiAgICAgIGNvbnN0IG1hbmlmZXN0ID0gYXdhaXQgZ2V0TWFuaWZlc3RXaXRoQ2FjaGVCdXJzdCgpO1xuICAgICAgbWFrZU1hbmlmZXN0KG1hbmlmZXN0LmRlZmF1bHQsIG91dERpcik7XG4gICAgfSxcbiAgfTtcbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBNlgsU0FBUyxvQkFBb0I7QUFDMVosU0FBUyxXQUFBQSxnQkFBZTtBQUN4QixPQUFPLHFCQUFxQjs7O0FDRjJaLFlBQVksUUFBUTtBQUMzYyxZQUFZLFVBQVU7QUFDdEIsU0FBUyxnQkFBZ0IsZ0JBQWdCO0FBRXpDLFNBQVMscUJBQXFCO0FBQzlCLFlBQVksYUFBYTtBQUx6QixJQUFNLG1DQUFtQztBQU96QyxJQUFNLEVBQUUsUUFBUSxJQUFJO0FBRXBCLElBQU0sVUFBVSxRQUFRLGtDQUFXLE1BQU0sSUFBSTtBQUM3QyxJQUFNLGVBQWUsUUFBUSxTQUFTLGFBQWE7QUFFbkQsSUFBTSw0QkFBNEIsTUFBdUQ7QUFDdkYsUUFBTSxpQkFBaUIsQ0FBQ0MsVUFBaUIsR0FBR0EsS0FBSSxJQUFJLEtBQUssSUFBSSxFQUFFLFNBQVMsQ0FBQztBQUt6RSxNQUFZLHFCQUFhLFNBQVM7QUFDaEMsV0FBTyxPQUFPLGVBQWUsY0FBYyxZQUFZLEVBQUUsSUFBSTtBQUFBLEVBQy9EO0FBQ0EsU0FBTyxPQUFPLGVBQWUsWUFBWTtBQUMzQztBQUVlLFNBQVIsbUJBQW9DLFFBQTBDO0FBQ25GLFdBQVMsYUFBYSxVQUFxQyxJQUFZO0FBQ3JFLFFBQUksQ0FBSSxjQUFXLEVBQUUsR0FBRztBQUN0QixNQUFHLGFBQVUsRUFBRTtBQUFBLElBQ2pCO0FBQ0EsVUFBTSxlQUFlLFFBQVEsSUFBSSxlQUFlO0FBRWhELFVBQU0sWUFBb0IsWUFBSTtBQUM5QixJQUFHLGlCQUFjLGNBQWMsZUFBZSx3QkFBd0IsVUFBVSxZQUFZLFlBQVksUUFBUSxDQUFDO0FBRWpILGFBQVMsZ0NBQWdDLFlBQVksSUFBSSxTQUFTO0FBQUEsRUFDcEU7QUFFQSxTQUFPO0FBQUEsSUFDTCxNQUFNO0FBQUEsSUFDTixhQUFhO0FBQ1gsV0FBSyxhQUFhLFlBQVk7QUFBQSxJQUNoQztBQUFBLElBQ0EsTUFBTSxjQUFjO0FBQ2xCLFlBQU1DLFVBQVMsT0FBTztBQUN0QixZQUFNLFdBQVcsTUFBTSwwQkFBMEI7QUFDakQsbUJBQWEsU0FBUyxTQUFTQSxPQUFNO0FBQUEsSUFDdkM7QUFBQSxFQUNGO0FBQ0Y7OztBRDVDQSxTQUFTLG1CQUFtQiwwQkFBMEI7QUFDdEQsU0FBUyxPQUFPLGNBQWMsbUJBQW1CO0FBTGpELElBQU1DLG9DQUFtQztBQU96QyxJQUFNQyxXQUFVQyxTQUFRQyxpQ0FBUztBQUNqQyxJQUFNLFNBQVNELFNBQVFELFVBQVMsS0FBSztBQUVyQyxJQUFNLFNBQVNDLFNBQVFELFVBQVMsTUFBTSxNQUFNO0FBQzVDLElBQU8sc0JBQVEsYUFBYTtBQUFBLEVBQzFCLFNBQVM7QUFBQSxJQUNQLE9BQU87QUFBQSxNQUNMLFNBQVNBO0FBQUEsTUFDVCxRQUFRO0FBQUEsTUFDUixXQUFXQyxTQUFRLFFBQVEsUUFBUTtBQUFBLElBQ3JDO0FBQUEsRUFDRjtBQUFBLEVBQ0EsU0FBUztBQUFBLElBQ1AsZ0JBQWdCO0FBQUEsTUFDZCxZQUFZO0FBQUEsSUFDZCxDQUFDO0FBQUEsSUFDRCxrQkFBa0I7QUFBQSxJQUNsQixtQkFBbUIsRUFBRSxPQUFPLENBQUM7QUFBQSxJQUM3QixTQUFTLG1CQUFtQixFQUFFLFFBQVEsS0FBSyxDQUFDO0FBQUEsRUFDOUM7QUFBQSxFQUNBLFdBQVdBLFNBQVFELFVBQVMsUUFBUTtBQUFBLEVBQ3BDLE9BQU87QUFBQSxJQUNMLEtBQUs7QUFBQSxNQUNILFNBQVMsQ0FBQyxNQUFNO0FBQUEsTUFDaEIsT0FBT0MsU0FBUUMsbUNBQVcseUJBQXlCO0FBQUEsTUFDbkQsTUFBTTtBQUFBLE1BQ04sVUFBVTtBQUFBLElBQ1o7QUFBQSxJQUNBO0FBQUEsSUFDQSxhQUFhO0FBQUEsSUFDYixXQUFXO0FBQUEsSUFDWCxRQUFRO0FBQUEsSUFDUixzQkFBc0I7QUFBQSxJQUN0QixPQUFPO0FBQUEsSUFDUCxlQUFlO0FBQUEsTUFDYixVQUFVLENBQUMsUUFBUTtBQUFBLElBQ3JCO0FBQUEsRUFDRjtBQUNGLENBQUM7IiwKICAibmFtZXMiOiBbInJlc29sdmUiLCAicGF0aCIsICJvdXREaXIiLCAiX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUiLCAicm9vdERpciIsICJyZXNvbHZlIiwgIl9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lIl0KfQo=
